var search_data = {"index":{"searchIndex":["vmlib","commanderror","errors","assignerror","bumperror","initerror","noversionerror","parametererror","parseerror","patherror","vmliberror","versionfileerror","file","source","version","<=>()","build()","build=()","bump_major()","bump_minor()","bump_patch()","bump_prerelease()","bump_release_type()","compare_build()","create()","enable_prerelease_parser()","find_file()","format()","inspect()","new()","new()","new()","parse()","prerelease()","prerelease=()","read()","reset()","tag()","to_s()","update()","write()","gemfile","readme","rakefile","version","created.rid","issue","vmlib.gemspec"],"longSearchIndex":["vmlib","vmlib::commanderror","vmlib::errors","vmlib::errors::assignerror","vmlib::errors::bumperror","vmlib::errors::initerror","vmlib::errors::noversionerror","vmlib::errors::parametererror","vmlib::errors::parseerror","vmlib::errors::patherror","vmlib::errors::vmliberror","vmlib::errors::versionfileerror","vmlib::file","vmlib::source","vmlib::version","vmlib::version#<=>()","vmlib::version#build()","vmlib::version#build=()","vmlib::version#bump_major()","vmlib::version#bump_minor()","vmlib::version#bump_patch()","vmlib::version#bump_prerelease()","vmlib::version#bump_release_type()","vmlib::version::compare_build()","vmlib#create()","vmlib::version::enable_prerelease_parser()","vmlib::file#find_file()","vmlib::version#format()","vmlib::version#inspect()","vmlib::file::new()","vmlib::source::new()","vmlib::version::new()","vmlib::version#parse()","vmlib::version#prerelease()","vmlib::version#prerelease=()","vmlib#read()","vmlib::version#reset()","vmlib::version#tag()","vmlib::version#to_s()","vmlib::source#update()","vmlib#write()","","","","","","",""],"info":[["VMLib","","VMLib.html","","<p>VMLib version information\n<p>Copyright (C) 2013 Nirenjan Krishnan All rights reserved.\n"],["VMLib::CommandError","","VMLib/CommandError.html","","<p>Raised when there is an issue on the command line\n"],["VMLib::Errors","","VMLib/Errors.html","","<p>This is a namespace for errors that can be thrown by VMLib\n"],["VMLib::Errors::AssignError","","VMLib/Errors/AssignError.html","","<p>Thrown if assigning an invalid value\n"],["VMLib::Errors::BumpError","","VMLib/Errors/BumpError.html","","<p>Thrown if bump operation cannot be performed\n"],["VMLib::Errors::InitError","","VMLib/Errors/InitError.html","","<p>Thrown if initialization fails\n"],["VMLib::Errors::NoVersionError","","VMLib/Errors/NoVersionError.html","","<p>Thrown if release type doesn&#39;t match with requested parameter\n"],["VMLib::Errors::ParameterError","","VMLib/Errors/ParameterError.html","","<p>Thrown if the API receives invalid parameters\n"],["VMLib::Errors::ParseError","","VMLib/Errors/ParseError.html","","<p>Thrown if parsing fails\n"],["VMLib::Errors::PathError","","VMLib/Errors/PathError.html","","<p>Thrown if there&#39;s an issue with the path for the version file\n"],["VMLib::Errors::VMLibError","","VMLib/Errors/VMLibError.html","","<p>Base class for all VMLib exceptions\n"],["VMLib::Errors::VersionFileError","","VMLib/Errors/VersionFileError.html","","<p>Thrown if there&#39;s an issue with the version file itself\n"],["VMLib::File","","VMLib/File.html","","<p>This is the file class for handling VMLib version files\n"],["VMLib::Source","","VMLib/Source.html","","<p>This is the class for updating source files with the new version\n"],["VMLib::Version","","VMLib/Version.html","","<p>This is the primary version number class for the version manager library\n<p>This is the primary version number …\n"],["<=>","VMLib::Version","VMLib/Version.html#method-i-3C-3D-3E","(other)","<p>Compare two version structures\n"],["build","VMLib::Version","VMLib/Version.html#method-i-build","()","<p>Get the build information\n"],["build=","VMLib::Version","VMLib/Version.html#method-i-build-3D","(build)","<p>Set the build information\n"],["bump_major","VMLib::Version","VMLib/Version.html#method-i-bump_major","()","<p>Bump the major release by 1 and reset the minor and patch releases to 0.\n"],["bump_minor","VMLib::Version","VMLib/Version.html#method-i-bump_minor","()","<p>Bump the minor release by 1 and reset the patch release to 0\n"],["bump_patch","VMLib::Version","VMLib/Version.html#method-i-bump_patch","()","<p>Bump the patch release by 1\n"],["bump_prerelease","VMLib::Version","VMLib/Version.html#method-i-bump_prerelease","()","<p>Bump the prerelease version by 1\n"],["bump_release_type","VMLib::Version","VMLib/Version.html#method-i-bump_release_type","()","<p>Bump the prerelease type\n"],["compare_build","VMLib::Version","VMLib/Version.html#method-c-compare_build","()","<p>Specify whether to compare build metadata or not between two versions\n"],["create","VMLib","VMLib.html#method-i-create","(name = '', dir = nil)","<p>Create a new version file for the current (or specified) folder. If it\nalready exists, then throw an …\n"],["enable_prerelease_parser","VMLib::Version","VMLib/Version.html#method-c-enable_prerelease_parser","()","<p>Specify whether to use the prerelease parser or not. Disabling this will\ncause an error to be thrown …\n"],["find_file","VMLib::File","VMLib/File.html#method-i-find_file","(dir = nil)","<p>Search the current and all parent folders for a version file Raises an\nerror if it cannot find any up …\n"],["format","VMLib::Version","VMLib/Version.html#method-i-format","(fstr)","<p>Display the version in the specified format Input: Format string\n\n<pre>%n - name\n%M - major version number\n%m ...</pre>\n"],["inspect","VMLib::Version","VMLib/Version.html#method-i-inspect","()","<p>Inspect the version object\n"],["new","VMLib::File","VMLib/File.html#method-c-new","(filename = nil)","<p>Create a new file object with the specified filename. If the filename is\nnot specified, it reverts to …\n"],["new","VMLib::Source","VMLib/Source.html#method-c-new","(vformat = '\"%M.%m.%p%r%b\"', dir = nil)","<p>Set up the tree to find the root of the source repository\n"],["new","VMLib::Version","VMLib/Version.html#method-c-new","(name = '', major = 0, minor = 0, patch = 0, prerelease = '0', build = '')","<p>Create a new version instance and set it to the specified parameters\n"],["parse","VMLib::Version","VMLib/Version.html#method-i-parse","(ver)","<p>Parse a string containing the project name and version number into its\nindividual components\n"],["prerelease","VMLib::Version","VMLib/Version.html#method-i-prerelease","()","<p>Get the prerelease information\n"],["prerelease=","VMLib::Version","VMLib/Version.html#method-i-prerelease-3D","(prerelease)","<p>Set the prerelease information\n"],["read","VMLib","VMLib.html#method-i-read","(dir = nil)","<p>Read the version file and return the parsed version data\n"],["reset","VMLib::Version","VMLib/Version.html#method-i-reset","()","<p>Reset the version number to 0.0.0-0\n"],["tag","VMLib::Version","VMLib/Version.html#method-i-tag","()","<p>Display a version tag suitable for use in tagging releases in the\nuser&#39;s version control system\n"],["to_s","VMLib::Version","VMLib/Version.html#method-i-to_s","()","<p>Display the version information as a string\n"],["update","VMLib::Source","VMLib/Source.html#method-i-update","()","<p>Update all the source files containing the version\n"],["write","VMLib","VMLib.html#method-i-write","(version, dir = nil)","<p>Write the specfied version into the version file\n"],["Gemfile","","Gemfile.html","","<p># A sample Gemfile source “rubygems.org”\n<p>gemspec # gem “rails”\n"],["README","","README_md.html","","<p>Version Manager Library\n<p>The Version manager library (VMLib) is a generic library to handle\nsemantic\nversioning ...\n"],["Rakefile","","Rakefile.html","","<p># VMLib Rakefile lib = File.expand_path(&#39;../lib&#39;, __FILE__)\n$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib) …\n"],["Version","","Version.html","","<p>vmlib 1.1.1\n"],["created.rid","","doc/created_rid.html","",""],["issue","","lib/vmlib/issue_txt.html","","<p>In paragraphs 10 and 11, the following text is present.\n<p>&gt; Identifiers MUST be comprised of only ASCII …\n"],["vmlib.gemspec","","vmlib_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}